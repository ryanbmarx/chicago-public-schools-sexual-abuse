// ######################################################################################
// # HANDLED HERE ARE EMEBDDED GRAPHICS, CHANGES TO IMAGES AND THE SIDE-SADDLE CONCEPT  #
// 
// The over-arching principle here is that only elements that have a side class (which 
// defaults to right placement) will go sidesaddle. No more extending the class elsewhere.
// This also introduces a middle step, called "notching," where things move out of the way 
// a little but remain partially in the river.
// 
// ######################################################################################

// Some asset widths 
$image-mug-max-width: 200px !default;
$chart-right-max-width: 280px !default;
$notched-max-width: $chart-right-max-width + ($grid-gap * 2) !default; // This adds room in the box for some padding
$media-column-min-width: 250px !default;

// Sidesaddle things
$side-width: calc(((100vw - #{$river-width-large}) / 2) - #{$container_padding_h * 2});
$side-max-width: (($container-max-width - $river-width-large) / 2) - $container_padding_h * 2;
// $side-background-color: #D4DBDE;
$side-background-color: darken($river-background-color, 10%);


// The infamous negative margin for making the notching
// This value is the overall distance the item needs to travel. It's half the sum of notched width
// plus the river's padding, then cut in half and made negative.
$side-saddle-middle-negative-margin: ($notched-max-width + $grid-gap * 2) / -2;

// Really fragile breakpoints
$notched-min-width: $river-width-large + $notched-max-width !default;
$side-saddle-min-width: $river-width-large + $media-column-min-width * 2 + $container_padding_h * 2 !default;




// Universal resets for this stuff
.chart, .image, .side, .video, .refer, .pullquote{
	box-sizing:border-box;
}

// AND SOME TWEAKS BECAUSE I NEED TO REFACTOR

.side.refer{

	padding: $grid-gap 0;
	background: transparent;
	
	border-top: 1px solid $trib-grey4;
	border-bottom: 1px solid $trib-grey4;

	.refer__headline, .refer__text {
		color: #{set-text-color($side-background-color, true)};
	}
}


// CHARTS

.chart{
	margin: $grid-gap 0;
	padding: $grid-gap 0;
	border-top: 1px solid $trib-gray4;
	border-bottom: 1px solid $trib-gray4;
}


// IMAGES
.image.image--mug{
	// Since mugs are so small anyways, they can float at the beginning
	width: 30vw;
	max-width: $image-mug-max-width;
	float: right;
	margin: 0 0 $grid-gap $grid-gap;
}

// VIDEOS

.video{
	margin: $grid-gap 0;
    width: 100%;
	&__headline{
		@include label7();
		margin: 0 0 #{$grid-gap / 2} 0;
	}

	&__wrapper{
		@include responsive-embed();
	}
}

.river ~ .video .video__headline{
	color: white;
}

// A special condition to hide images and charts within closed sidebars

.sidebar {
	.pullquote, .refer, .video { display:none }

	// Use visibility here so the images can lazyload properly. 
	// With display:none, they have a BoundingRect.y of zero, 
	// which triggers the lazy load immediately, but without 
	// the display none, they're visible outside the sidebar (sidesaddle)
	// even if the sidebar is not open. This is the solution. Visibility 
	// still takes up space even if it is not visible.

	// NOTE: We DO want the illos visible, tho.
	.chart, .image:not(.illo){ visibility: hidden; }
}

.sidebar--open {
	.pullquote, .refer, .video { display:block }
	
	.chart, .image, .image:not(.illo){ visibility: visible; }
}

.illo{
	position: relative;

	@supports (mix-blend-mode: multiply){

		&:after{
			// This will tint the image with our river background color, 
			// making a white-bg image blend seamlessly with what's around it.
			content: "";
			display:block;
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: $river-background-color;
			mix-blend-mode: multiply;
		}
		
		// This will cover up the "double multiplied" section where the tint screen above
		// combines with the river background, so we get a slightly darker shade.

		img{
			margin: 0;
		    display: block;
		}
		img + figcaption {
			margin: 0;
			padding-top: 7px;
			background: $river-background-color;
			position: relative;
			z-index: 2; // Moves the opaque figcaption up over the screen to cover the double multiplied portion
		}
	}
}

.image--credit-only figcaption{
	text-align:right;
}

@media all and (min-width: $river-width-large){

	// With a little room, our floated items can float.
	.chart.chart--right{
		max-width: $chart-right-max-width;
		float: right;
		padding: 0;
		border-top: none;
		border-bottom: none;
		margin-left: $grid-gap;
	}
}
/*
@media all and (min-width: $notched-min-width){
	.river{
		// We only care about notching stuff inside the river. 
		// ANything going fullwidth is on its own.

		.pullquote.side, .chart.side, .image.image--mug, .image.side, .video.side, .refer.side, .side{
			// We'll want our special background color, but not for ALL side items.
			// background: $side-background-color;
			// color: #{set-text-color($side-background-color, true)};
		}

		.side .illo:after, .side.illo:after{
			// background: $side-background-color;
		}

		.side{
			// &:not(.refer), &.chart, &.video{
			&.refer, &.chart, &.video, &.pullquote{
				// .refers should NOT notch. But everything else should
				float: right; // ANY chart which is to go side-saddle shall float. That is how this works. It is decreed.
				// padding: $grid-gap / 2;			
				max-width: $notched-max-width;
				margin: 0 $side-saddle-middle-negative-margin 0 $grid-gap;
			}
		}

		.side.side--left{
				margin: 0 $grid-gap 0 $side-saddle-middle-negative-margin;
				float: left;
		}

		.image.image--mug{
			// Notch the mugshots, but with it's own max-width
			// padding: $grid-gap / 2;
			max-width: $image-mug-max-width + $grid-gap * 2 !important; // Important so he other .image styles don't disrupt it.
			margin-right: ($image-mug-max-width + $grid-gap * 4) / -2;
		}
	
	}
}
*/
@media all and (min-width: $side-saddle-min-width){
	// TODO: Check on floated elements in sidebars
	// We only care about sidesaddle stuff for elements
	// inside the river. ANything going fullwidth is on its own.

	.side, .river .chart.side, .river .image.side, .river .video.side{
		position: absolute;
		width: $side-width;
		max-width: $side-max-width;
		left: calc(#{$container_padding_h} + #{$river-width-large} + (100vw - #{$river-width-large}) / 2);
		// This cancels the notched styling
	    margin: 0 !important; // Imprt used here to just tell all the other margins in use to go eff themselves.
	    float:none;
	}

	.side.side--left{
		margin: 0;
		float: none;
		// left: calc(#{$container_padding_h} + #{$river-width-large} + (100vw - #{$river-width-large}) / 2);
		left: auto;
		right: calc(50% + #{($river-width-large / 2) + $grid-gap - $container_padding_h});

	}
}	

@media all and (min-width: $container-max-width){

	.side, .river .chart.side, .river .image.side, .river .video.side{
		// Because 100vw is too large at this point, we will just use the container maxwidth because that's the way to go.
		left:$container_padding_h + $river-width-large + (($container-max-width - $river-width-large) / 2);
	}

}